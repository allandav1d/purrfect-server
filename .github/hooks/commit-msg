#!/bin/bash

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Lê a mensagem do commit
COMMIT_MSG_FILE=$1
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Padrão de commit esperado
PATTERN="^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|temp|wip|remove|change)(\([a-z-]+\))?: .+$"

# Verifica se a mensagem segue o padrão
if ! echo "$COMMIT_MSG" | grep -qE "$PATTERN"; then
    echo -e "${RED}Erro: Mensagem de commit inválida${NC}"
    echo -e "${YELLOW}A mensagem deve seguir o padrão: <tipo>(escopo opcional): <descrição>${NC}"
    echo -e "\nTipos permitidos:"
    echo -e "${GREEN}feat${NC}     : Nova funcionalidade"
    echo -e "${GREEN}fix${NC}      : Correção de bug"
    echo -e "${GREEN}docs${NC}     : Documentação"
    echo -e "${GREEN}style${NC}    : Formatação, ponto e vírgula faltando, etc"
    echo -e "${GREEN}refactor${NC} : Refatoração do código"
    echo -e "${GREEN}test${NC}     : Adição ou correção de testes"
    echo -e "${GREEN}chore${NC}    : Alterações em arquivos de build, etc"
    echo -e "${GREEN}perf${NC}     : Melhorias de performance"
    echo -e "${GREEN}ci${NC}       : Alterações na configuração do CI"
    echo -e "${GREEN}build${NC}    : Alterações no sistema de build"
    echo -e "${GREEN}temp${NC}     : Alterações temporárias"
    echo -e "${GREEN}wip${NC}      : Trabalho em progresso"
    echo -e "${GREEN}remove${NC}   : Remoção de código ou arquivos"
    echo -e "${GREEN}change${NC}   : Alterações que não se encaixam em outras categorias"
    echo -e "\nExemplos:"
    echo -e "${GREEN}feat(auth)${NC}: adiciona autenticação com Google"
    echo -e "${GREEN}fix${NC}: corrige erro no login"
    echo -e "${GREEN}docs${NC}: atualiza README"
    exit 1
fi

# Extrai o tipo do commit
COMMIT_TYPE=$(echo "$COMMIT_MSG" | sed -n 's/^\([a-zA-Z]\+\).*/\1/p')

# Extrai a mensagem sem o tipo e escopo
COMMIT_CONTENT=$(echo "$COMMIT_MSG" | sed -E 's/^[a-zA-Z]+(\([a-z-]+\))?: //')

# Define a seção do changelog baseado no tipo do commit
case "$COMMIT_TYPE" in
    feat|feature)
        SECTION="Adicionado"
        ;;
    fix|bugfix)
        SECTION="Corrigido"
        ;;
    change|refactor)
        SECTION="Alterado"
        ;;
    remove)
        SECTION="Removido"
        ;;
    docs)
        SECTION="Documentação"
        ;;
    perf)
        SECTION="Performance"
        ;;
    *)
        # Para outros tipos, não adiciona ao changelog
        exit 0
        ;;
esac

# Adiciona a entrada no changelog apenas se for um tipo que deve ser registrado
if [ -n "$SECTION" ]; then
    # Extrai o escopo se existir
    SCOPE=$(echo "$COMMIT_MSG" | sed -n 's/^[a-zA-Z]\+(\([a-z-]\+\)):.*/\1/p')
    
    # Formata a entrada do changelog
    if [ -n "$SCOPE" ]; then
        CHANGELOG_ENTRY="- **$SCOPE**: $COMMIT_CONTENT"
    else
        CHANGELOG_ENTRY="- $COMMIT_CONTENT"
    fi
    
    # Adiciona ao changelog
    sed -i "/## \[Não publicado\]/a $CHANGELOG_ENTRY" CHANGELOG.md
fi

# Atualiza a versão apenas para feat e fix
if [ "$COMMIT_TYPE" = "feat" ]; then
    bun version minor -m "chore: bump version to %s"
elif [ "$COMMIT_TYPE" = "fix" ]; then
    bun version patch -m "chore: bump version to %s"
fi 