#!/bin/bash

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${YELLOW}Validando antes do push...${NC}"

# Verifica se há commits para enviar
if git rev-list @{u}.. --count | grep -q "^0$"; then
    echo -e "${RED}Erro: Não há commits para enviar${NC}"
    exit 1
fi

# Verifica se o branch está sincronizado com o remoto
git fetch origin
LOCAL=$(git rev-parse @)
REMOTE=$(git rev-parse @{u})
BASE=$(git merge-base @ @{u})

if [ $LOCAL = $REMOTE ]; then
    echo -e "${GREEN}Branch está atualizado${NC}"
elif [ $LOCAL = $BASE ]; then
    echo -e "${RED}Erro: Você precisa fazer pull antes de push${NC}"
    exit 1
fi

# Verifica se o changelog está correto
echo -e "${YELLOW}Verificando changelog...${NC}"

# Verifica se há seção [Não publicado] vazia
if grep -A 1 "## \[Não publicado\]" CHANGELOG.md | tail -n 1 | grep -q "^## \["; then
    echo -e "${GREEN}✓ Seção [Não publicado] está correta${NC}"
else
    echo -e "${RED}Erro: Seção [Não publicado] está incorreta${NC}"
    exit 1
fi

# Verifica se a versão no package.json corresponde à última versão no changelog
PACKAGE_VERSION=$(node -p "require('./package.json').version")
CHANGELOG_VERSION=$(grep -oP "## \[\K[0-9]+\.[0-9]+\.[0-9]+" CHANGELOG.md | head -n 1)

if [ "$PACKAGE_VERSION" = "$CHANGELOG_VERSION" ]; then
    echo -e "${GREEN}✓ Versões estão sincronizadas${NC}"
else
    echo -e "${RED}Erro: Versão no package.json ($PACKAGE_VERSION) não corresponde à versão no changelog ($CHANGELOG_VERSION)${NC}"
    exit 1
fi

echo -e "${GREEN}Tudo validado com sucesso!${NC}"
exit 0 