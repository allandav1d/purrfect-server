#!/bin/bash

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Função para verificar sincronização
check_sync() {
    git fetch origin
    LOCAL=$(git rev-parse @)
    REMOTE=$(git rev-parse @{u})
    BASE=$(git merge-base @ @{u})

    if [ $LOCAL = $REMOTE ]; then
        echo -e "${GREEN}✓ Branch está atualizado${NC}"
        return 0
    elif [ $LOCAL = $BASE ]; then
        echo -e "${RED}Branch local está atrás do remoto${NC}"
        return 1
    elif [ $REMOTE = $BASE ]; then
        echo -e "${YELLOW}Branch local está à frente do remoto${NC}"
        return 2
    else
        echo -e "${RED}Branches divergiram${NC}"
        return 3
    fi
}

echo -e "${YELLOW}Validando antes do push...${NC}"

# Verifica se há commits para enviar
if git rev-list @{u}.. --count | grep -q "^0$"; then
    echo -e "${RED}Erro: Não há commits para enviar${NC}"
    exit 1
fi

# Verifica sincronização inicial
echo -e "${YELLOW}Verificando sincronização com o remoto...${NC}"
check_sync
SYNC_STATUS=$?

if [ $SYNC_STATUS -eq 1 ]; then
    echo -e "${RED}Erro: Branch local está atrás do remoto. Execute 'git pull' primeiro.${NC}"
    exit 1
elif [ $SYNC_STATUS -eq 3 ]; then
    # Tenta fazer rebase automático
    echo -e "${YELLOW}Tentando sincronizar automaticamente...${NC}"
    
    # Salva alterações atuais
    git stash push -m "backup antes de sincronizar"
    
    # Tenta fazer rebase
    if git pull --rebase origin main; then
        echo -e "${GREEN}✓ Rebase realizado com sucesso${NC}"
        
        # Restaura alterações
        if git stash list | grep -q "backup antes de sincronizar"; then
            git stash pop
            echo -e "${GREEN}✓ Alterações locais restauradas${NC}"
        fi
    else
        # Se falhar, restaura estado anterior
        git rebase --abort
        if git stash list | grep -q "backup antes de sincronizar"; then
            git stash pop
        fi
        echo -e "${RED}Erro: Não foi possível sincronizar automaticamente.${NC}"
        echo -e "${YELLOW}Por favor, resolva os conflitos manualmente:${NC}"
        echo -e "1. git pull origin main"
        echo -e "2. Resolva os conflitos"
        echo -e "3. git add ."
        echo -e "4. git commit"
        echo -e "5. Tente o push novamente"
        exit 1
    fi
fi

# Verifica se o changelog está correto
echo -e "${YELLOW}Verificando changelog...${NC}"

# Obtém a versão atual do package.json
PACKAGE_VERSION=$(node -p "require('./package.json').version")
DATE=$(date +%Y-%m-%d)

# Verifica se há conteúdo entre [Não publicado] e a próxima versão
NEXT_VERSION_LINE=$(grep -n "## \[[0-9]" CHANGELOG.md | head -n 1 | cut -d: -f1)
UNPUBLISHED_CONTENT=$(sed -n "/## \[Não publicado\]/,${NEXT_VERSION_LINE}p" CHANGELOG.md | grep -v "## \[" | grep -v "^$" | sort -u || true)

# Verifica se a versão no package.json corresponde à última versão no changelog
CHANGELOG_VERSION=$(grep -oP "## \[\K[0-9]+\.[0-9]+\.[0-9]+" CHANGELOG.md | head -n 1)

if [ "$PACKAGE_VERSION" != "$CHANGELOG_VERSION" ]; then
    echo -e "${YELLOW}Sincronizando versões...${NC}"
    
    # Cria um arquivo temporário
    TMP_FILE=$(mktemp)
    
    # Mantém o cabeçalho até [Não publicado]
    sed -n '1,/## \[Não publicado\]/p' CHANGELOG.md > "$TMP_FILE"
    echo "" >> "$TMP_FILE"
    
    # Adiciona a nova versão
    echo "## [$PACKAGE_VERSION] - $DATE" >> "$TMP_FILE"
    
    # Se houver conteúdo não publicado, adiciona à nova versão
    if [ -n "$UNPUBLISHED_CONTENT" ]; then
        echo "$UNPUBLISHED_CONTENT" >> "$TMP_FILE"
    else
        # Se não houver conteúdo não publicado, adiciona uma entrada padrão
        echo "### Alterado" >> "$TMP_FILE"
        echo "- Atualização de versão para $PACKAGE_VERSION" >> "$TMP_FILE"
    fi
    echo "" >> "$TMP_FILE"
    
    # Adiciona o resto do changelog (versões anteriores)
    sed -n '/## \[[0-9]/,$p' CHANGELOG.md >> "$TMP_FILE"
    
    # Remove entradas duplicadas
    awk '!seen[$0]++' "$TMP_FILE" > "$TMP_FILE.tmp" && mv "$TMP_FILE.tmp" "$TMP_FILE"
    
    # Substitui o changelog antigo
    mv "$TMP_FILE" CHANGELOG.md
    
    # Adiciona as alterações
    git add CHANGELOG.md
    git commit --amend --no-edit
    
    echo -e "${GREEN}✓ Changelog atualizado com a nova versão${NC}"
fi

# Verifica novamente se as versões estão sincronizadas
CHANGELOG_VERSION=$(grep -oP "## \[\K[0-9]+\.[0-9]+\.[0-9]+" CHANGELOG.md | head -n 1)

if [ "$PACKAGE_VERSION" = "$CHANGELOG_VERSION" ]; then
    echo -e "${GREEN}✓ Versões estão sincronizadas${NC}"
else
    echo -e "${RED}Erro: Versão no package.json ($PACKAGE_VERSION) não corresponde à versão no changelog ($CHANGELOG_VERSION)${NC}"
    exit 1
fi

# Verifica se ainda estamos em versão beta
if [[ $PACKAGE_VERSION =~ ^0\. ]]; then
    echo -e "${YELLOW}Projeto em fase beta (v$PACKAGE_VERSION)${NC}"
fi

# Verifica sincronização final
echo -e "${YELLOW}Verificando sincronização final...${NC}"
check_sync
FINAL_SYNC_STATUS=$?

if [ $FINAL_SYNC_STATUS -eq 2 ]; then
    echo -e "${YELLOW}Aguardando push ser concluído...${NC}"
elif [ $FINAL_SYNC_STATUS -ne 0 ]; then
    echo -e "${RED}Erro: Repositório não está sincronizado após as alterações${NC}"
    echo -e "${YELLOW}Execute 'git pull' e tente novamente${NC}"
    exit 1
fi

echo -e "${GREEN}Tudo validado com sucesso!${NC}"
exit 0 